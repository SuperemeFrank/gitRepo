git2个分区：
1、工作区（包含.git的那个目录） 
2、版本库（.git 目录)-->cache (缓存区)
	             -->branch(主分支master)
核心理念：git 管理的是修改而不是提交，分散式版本控制系统（相对于 svn 集中式而言）,每一个 clone 都是一个完整的版本库。

三种状态：
1）工作区状态：文件在工作区的状态，这个时候的文件还没有提交到版本库中，只是在工作区修改已经完成，这个时候电脑里面文件内容是已经修改了的，但是版本库中的快照并没有修改完成。
2）add状态：工作区的文件通过git add指令进入add状态，这个时候文件已经存入了cache中，但是还没有存入快照中用户想要修改取消很容易。（对同一个文件修改多次，以最后add的文件为主）
3）commit状态：在add状态的文件通过git commit 指令将cache中的修改存入快照中。对于不同的brach可以理解为为每一个branch生成了各自独立的快照分区，因此在没合并branch之前一个branch中的修改的内容在另一个branch上是看不到的。只有快照的东西才是可以push到远程仓库的。

branch：在一个branch上创建一个新的branch git会将父branch上的内容拷贝到子branch上，但是父子branch之后的修改在不merge之前都是不可见的。在团队协作开发用会常常用到多个branch,其中master是主分支（也是发布正式版本的分支），在master下通常会有一个dev子分支（测试分支，用于发布beta版的分支），在dev分支下就是一个个功能模块分支，每开发好一个模块或者模块一部分就可以merge到dev分支上面去。每一个分支都有自己的独立的快照，而工作区可以理解为分支快照的镜像，当切换到一个分支的时候会发现工作区的内容也会变成与这个分支相应快照。
但是注意工作区并不等同于分支快照，在commit之前对工作区内容的修改并不会修改分支快照的内容。

merge: merge指分支合并，例如我完成了自己bug分支的内容，然后会去和上级的dev分支进行合并，这样我只需要push dev分支就可以完成远程仓库里代码的修改了。但是分支在合并的时候也会出现冲突的情况，比如：我和同事同时在修改bug这个模块，同事先在他本地merge之后push到了远程仓库，这个时候我再push就可能因为远程dev分支上面bug模块代码刚修改过（dev内容与我最开始clone下来的本地dev内容不一致了）跟我push的bug代码不一致而产生冲突（具体如何判定冲突git 有自己的算法）。冲突产生后需要手动或者ide去修改（先push的人没事，后push的人倒霉），这个时候只能把远程仓库再pull下来，对冲突的区域进行手动修改。冲突一般只会发生在两个要合并的分支都commit了修改，并且修改的内容有了重叠。

.gitignore文件:特殊文件，用于忽略不想要上传到远程仓库的文件，例如编译时产生的不必要文件，或者数据库账户配置文件等等。

tag: tag 类似于commit时产生的id, 由于id太长又难以记忆，所以可以用tag来为需要的版本库打一个标签，方便在需要的时候将历史版本库取出，作用跟commit id类似。



